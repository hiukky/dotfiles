#!/bin/bash
# By @hiukky https://hiukky.com

sudo pacman -S figlet lolcat --needed --noconfirm &>/dev/null

declare -a OPTIONS_DEFAULT=(
    ' m - menu'
    ' b - back'
    ' e - exit'
)

declare -a OPTIONS_MENU=(
    '- dots'
    '- packages'
)

declare -a OPTIONS_DOTS=(
    '- initialize new machine configuration'
    '- configure from existing dotfiles'
)

declare -a OPTIONS_PKGS=(
    '- synchronize packages'
    '- install packages'
)

declare -a OPTIONS_PKGS_SYNC=(
    '- npm packages'
    '- system packages'
    '- all packages'
)

declare -a OPTIONS_PKGS_INSTALL=(
    '- npm packages'
    '- system packages'
    '- developer packages'
    '- all packages'
)

declare -a OPTIONS_PKGS_INSTALL_DEVELOPER=(
    '- redis server'
    '- all packages'
)

_colorfy() {
    echo "$1" | lolcat
}

_dot() {
  /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME $@
}

_init() {
  if [ ! -d "$HOME/.dotfiles" ]; then
    _colorfy $'\n Initializing dotfiles configuration ...\n'

    git init --bare $HOME/.dotfiles
    alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
    _dot config --local status.showUntrackedFiles no
    echo "alias dot='/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'" >> $HOME/.zshrc
  else
    _colorfy $'\n Dotfiles already booted! \n'
    exit 0
  fi

  _colorfy $'\n Done!! \n'
}

_sync() {
  if [ ! -d "$HOME/.dotfiles" ]; then
    git clone --bare git@github.com:hiukky/dotfiles.git $HOME/.dotfiles
    mkdir -p .config-bck
    _dot checkout
  fi

  if [ $? = 0 ]; then
    _colorfy $'\n Dotfiles checked! \n'

    else
      _colorfy $'\n Backing up ...\n'
      _dot checkout 2>&1 | egrep "\s+\." | awk {'print $1'} | xargs -I{} mv {} .config-bck/{}
  fi

  _dot checkout
  _dot config status.showUntrackedFiles no

  echo
}

_menuHeader() {
  clear

  figlet Dotsync | lolcat

  if [ $2 ]; then
    printf '%s\n'  $'\n'"${OPTIONS_DEFAULT[2]}"$'\n'
  else
    printf '%s\n'  $'\n'"${OPTIONS_DEFAULT[@]}"$'\n'
  fi

  if [ "$1" != null ]; then
    _colorfy $'\n'"$1"$'\n'
  fi

  PS3=$'\nSelect an option: '
}

_menuDefaultActions() {
    case "$REPLY" in
      'e'|'E')
        exit
        break;;

      'm'|'M')
        _menu
        break;;

      'b'|'B')
         $1
        break;;
    esac
}

_menuDots() {
  _menuHeader "- D O T S"

  select option in "${OPTIONS_DOTS[@]}"
  do
    case "$REPLY" in
      1)
        _init
        break;;
      2)
        _sync
        break;;
      *)
        _menuDefaultActions _menu
      esac
  done
}

_menuPkgs() {
  _menuHeader "- P A C K A G E S"

  select option in "${OPTIONS_PKGS[@]}"
  do
    case "$REPLY" in
      1)
        _menuPkgsSync
        break;;
      2)
        _menuPkgsInstall
        break;;
      *)
        _menuDefaultActions _menu
      esac
  done
}

_menuPkgsSync() {
  _menuHeader "- P A C K A G E S > Sync"


  select option in "${OPTIONS_PKGS_SYNC[@]}"
  do
    case "$REPLY" in
      1)
        python -c 'import scripts.packages; scripts.packages._syncNpmPkgs()'
        break;;
      2)
        python -c 'import scripts.packages; scripts.packages._syncSystemPkgs()'
        break;;
      3)
        python -c 'import scripts.packages; scripts.packages._syncAllPkgs()'
        break;;
      *)
        _menuDefaultActions _menuPkgs
      esac
  done
}

_menuPkgsInstall() {
  _menuHeader "- P A C K A G E S > Install"


  select option in "${OPTIONS_PKGS_INSTALL[@]}"
  do
    case "$REPLY" in
      1)
        python -c 'import scripts.packages; scripts.packages._installNpmPkgs()'
        break;;
      2)
        python -c 'import scripts.packages; scripts.packages._installSystemPkgs()'
        break;;
      3)
        _menuPkgsInstallDeveloper
        break;;
      4)
        python -c 'import scripts.packages; scripts.packages._installAllPkgs()'
        break;;
      *)
        _menuDefaultActions _menuPkgs
      esac
  done
}

_menuPkgsInstallDeveloper() {
  _menuHeader "- P A C K A G E S > Install > Developer"


  select option in "${OPTIONS_PKGS_INSTALL_DEVELOPER[@]}"
  do
    case "$REPLY" in
      1)
        python -c 'import scripts.redis; scripts.redis._install()'
        break;;
      2)
        python -c 'import scripts.packages; scripts.packages._installDeveloperPkgs()'
        break;;
      *)
        _menuDefaultActions _menuPkgsInstall
      esac
  done
}

_menu() {
  _menuHeader null false

  select option in "${OPTIONS_MENU[@]}"
  do
    case "$REPLY" in
      1)
        _menuDots
        break;;
      2)
        _menuPkgs
        break;;
      *)
        _menuDefaultActions
      esac
  done
}

_menu
